# Use Node as the base container. Like FROM in Dockerfile.
box: node

# This Pipeline is run whenever a new git commit is pushed.
build:
  steps:
    # A step that executes `npm install` command
    - npm-install

    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: Validate node version and directory information
        code: |
          echo "node version $(node -v) running"
          echo "npm version $(npm -v) running"
          echo "pwd $(pwd)"
          echo "ls -ltrah $(ls -ltrah)"

# This pipeline will be chained to start at the end of a build pipeline in the
# Wercker Web Workflows editor.
push-to-dockerhub:
  steps:
    - internal/docker-push:
        username: $USERNAME
        password: $PASSWORD
        tag: development
        working-dir: /pipeline/source # For some reason this isn't the default
        cmd: "node app.js"
        ports: "8080"
        repository: philchungny/node-api-container
        registry: https://registry.hub.docker.com

# This pipeline will be chained to start at the end of a build pipeline in the
# Wercker Web Workflows editor.
restart-occs-deployment:
  steps:
    - script:
        name: Restart OCCS Deployment
        code: |
          curl -k -X POST 'https://140.86.12.44/api/v2/deployments/node-api-container-20170817-144343/webhook/restart?token=ompsnwvv' -H 'authorization: Basic $($BEARER_TOKEN)'
 

# This pipeline will be chained to run in parallel with the restart-occs-deplyment pipeline in the 
# Wercker Web Workflows editor.
restart-gce-deployment:
    steps:
      - kubectl:
          server: $GCE_KUBERNETES_MASTER
          username: $GCE_KUBERNETES_USERNAME
          password: $GCE_KUBERNETES_PASSWORD
          command: apply -f kube-deployment.yaml

# Deploy to AWS Elastic Beanstalk
deploy-to-ebs:
  steps:
  - koding/eb-deploy@0.31.0:
      access-key: $AWS_KEY
      secret-key: $AWS_SECRET
      app-name: node-api-container
      env-name: node-api-container
      version-label: 1.0
      region: $AWS_REGION
      s3-bucket: s3://node-api-container/
      s3-key: my-wordpress-app-1.2.1.tar.gz

# Push to the Google Container Registry
push-to-gcr:
    steps:
      - internal/docker-push:
          username: _json_key
          password: $GCR_JSON_KEY_FILE
          repository: gcr.io/node-api-container-175518/node-api-container
          registry: https://gcr.io/v2
        
# Push to AWS Elastic Container Registry
push-to-ecr:
  steps:
    - internal/docker-push:
        aws-access-key: $AWS_ACCESS_KEY_ID
        aws-secret-key: $AWS_SECRET_ACCESS_KEY
        aws-region: $AWS_REGION
        aws-registry-id: $AWS_REGISTRY_ID
        repository: 432275605314.dkr.ecr.us-east-1.amazonaws.com/node-api-container 
